install.packages("swirl")
library("swirl")
swirl()
data <- USArrests
help(USArrests)
last.letter.vowel = c()
for(i in 1:dim(USArrests)[1]) {
state.name = rownames(USArrests)[i]
lenth.of.state.name = nchar(state.name)
last.letter = substr(state_name,lenth.of.capital, lenth.of.state.name)
if (last.letter %in% c('a','e','i','o','u','y')) {
last.letter.vowel<-c(last.letter.vowel,1)
}
else {
last.letter.vowel<-c(last.letter.vowel,0)
}
}
last.letter.vowel = c()
for(i in 1:dim(USArrests)[1]) {
state.name = rownames(USArrests)[i]
lenth.of.state.name = nchar(state.name)
last.letter = substr(state_name,lenth.of.capital, lenth.of.state.name)
if (last.letter %in% c('a','e','i','o','u','y')) {
last.letter.vowel<-c(last.letter.vowel,1)
}
else {
last.letter.vowel<-c(last.letter.vowel,0)
}
}
data = cbind(data,last.letter.vowel)
for(i in 1:dim(USArrests)[1]) {
state.name = rownames(USArrests)[i]
lenth.of.state.name = nchar(state.name)
last.letter = substr(state
last.letter.vowel = c()
for(i in 1:dim(USArrests)[1]) {
state.name = rownames(USArrests)[i]
lenth.of.state.name = nchar(state.name)
last.letter = substr(state.name,lenth.of.capital, lenth.of.state.name)
if (last.letter %in% c('a','e','i','o','u','y')) {
last.letter.vowel<-c(last.letter.vowel,1)
}
else {
last.letter.vowel<-c(last.letter.vowel,0)
}
}
last.letter.vowel = c()
for(i in 1:dim(USArrests)[1]) {
state.name = rownames(USArrests)[i]
lenth.of.state.name = nchar(state.name)
last.letter = substr(state.name,lenth.of.capital, lenth.of.state.name)
if (last.letter %in% c('a','e','i','o','u','y')) {
last.letter.vowel<-c(last.letter.vowel,1)
}
else {
last.letter.vowel<-c(last.letter.vowel,0)
}
}
# Dataset overview
# https://vincentarelbundock.github.io/Rdatasets/datasets.html
USArrests
data <- USArrests
#Whats going on?
help(USArrests)
last.letter.vowel = c()
for(i in 1:dim(USArrests)[1]) {
state.name = rownames(USArrests)[i]
lenth.of.state.name = nchar(state.name)
last.letter = substr(state.name,lenth.of.state.name, lenth.of.state.name)
if (last.letter %in% c('a','e','i','o','u','y')) {
last.letter.vowel<-c(last.letter.vowel,1)
}
else {
last.letter.vowel<-c(last.letter.vowel,0)
}
}
data = cbind(data,last.letter.vowel)
data
install.packages('randomForest')
library(randomForest)
data(iris)
iris
?iris
iris.rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
iris.rf
importance(iris.rf)
iris.p <- classCenter(iris[,-5], iris[,5], iris.rf$prox)
plot(iris[,3], iris[,4], pch=21, xlab=names(iris)[3], ylab=names(iris)[4],
bg=c("red", "blue", "green")[as.numeric(factor(iris$Species))],
main="Iris Data with Prototypes")
points(iris.p[,3], iris.p[,4], pch=21, cex=2, bg=c("red", "blue", "green"))
source('C:/Users/carol/OneDrive/Documents/R Code/t-distribution curve.R')
#' Draws a t-distribution curve and shades rejection regions
#'
#'@param df degrees of freedom.
#'@param alpha significance level
#'@param h0 null hypothesis value
#' @param sides one of: both, left, right
#' @param t_calc calculated test statistics
#' @examples
shade(14, 0.05, 1.8, t_calc=2.35)
shade(14, 0.05, 1.8, t_calc=2.35)
shade <- function(df, alpha, h0 = 0, sides='both', t_calc=NULL) {
e_alpha = alpha
if(sides == 'both'){
e_alpha = alpha / 2
}
cv = abs(qt(e_alpha, df))
curve(dt(x, df), from = -4, to = 4, ylab='P(x)', xaxt='n')
abline(v = 0, col = "black", lwd = 0.5)
labels = h0
at = 0
if(sides == 'both' | sides == 'left'){
x <- seq(-4, -abs(cv), len = 100)
y <- dt(x, df)
polygon(c(x, -abs(cv)), c(y, min(y)), col = "blue", border = NA)
lines(c(-cv, -cv), c(0, dt(-cv, df)), col = "black", lwd = 1)
text(-cv - (4 - cv) / 2, 0.05, e_alpha)
labels = c(round(-cv, 3), labels)
at = c(-cv, at)
}
if(sides == 'both' | sides == 'right'){
x <- seq(abs(cv), 4, len = 100)
y <- dt(x, df)
polygon(c(abs(cv), x), c(min(y), y), col = "blue", border = NA)
lines(c(cv, cv), c(0, dt(cv, df)), col = "black", lwd = 1)
text(cv + (4 - cv) / 2, 0.05, e_alpha)
labels = c(labels, round(cv, 3))
at = c(at, cv)
}
if(is.numeric(t_calc)){
abline(v = t_calc, col = "red", lwd = 2)
text(t_calc + 0.5, 0.2, t_calc, col = "red")
}
axis(1, at=at, labels=labels)
}
shade(14, 0.05, 1.8, t_calc=2.35)
shade <- function(df, alpha, h0 = 0, sides='both', t_calc=2.35) {
e_alpha = alpha
if(sides == 'both'){
e_alpha = alpha / 2
}
cv = abs(qt(e_alpha, df))
curve(dt(x, df), from = -4, to = 4, ylab='P(x)', xaxt='n')
abline(v = 0, col = "black", lwd = 0.5)
labels = h0
at = 0
if(sides == 'both' | sides == 'left'){
x <- seq(-4, -abs(cv), len = 100)
y <- dt(x, df)
polygon(c(x, -abs(cv)), c(y, min(y)), col = "blue", border = NA)
lines(c(-cv, -cv), c(0, dt(-cv, df)), col = "black", lwd = 1)
text(-cv - (4 - cv) / 2, 0.05, e_alpha)
labels = c(round(-cv, 3), labels)
at = c(-cv, at)
}
if(sides == 'both' | sides == 'right'){
x <- seq(abs(cv), 4, len = 100)
y <- dt(x, df)
polygon(c(abs(cv), x), c(min(y), y), col = "blue", border = NA)
lines(c(cv, cv), c(0, dt(cv, df)), col = "black", lwd = 1)
text(cv + (4 - cv) / 2, 0.05, e_alpha)
labels = c(labels, round(cv, 3))
at = c(at, cv)
}
if(is.numeric(t_calc)){
abline(v = t_calc, col = "red", lwd = 2)
text(t_calc + 0.5, 0.2, t_calc, col = "red")
}
axis(1, at=at, labels=labels)
}
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5)
)
# You're about to write your first function! Just like you would assign a value
# to a variable with the assignment operator, you assign functions in the following
# way:
#
function_name <- function(arg1, arg2){
#    # Manipulate arguments in some way
#    # Return a value
}
#
# The "variable name" you assign will become the name of your function. arg1 and
# arg2 represent the arguments of your function. You can manipulate the arguments
# you specify within the function. After sourcing the function, you can use the
# function by typing:
#
function_name(value1, value2)
#
# Below we will create a function called boring_function. This function takes
# the argument `x` as input, and returns the value of x without modifying it.
# Delete the pound sign in front of the x to make the function work! Be sure to
# save this script and type submit() in the console after you make your changes.
boring_function <- function(x) {
x
}
submit()
boring_function('My first function!')
boring_function
my_mean <- function(my_vector) {
sum(my_vector) / length(my_vector)
}
submit()
my_mean(c(4, 5, 10))
m
remainder <- function(num, divisor = 2) {
num %% divisor
}
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args()
args(remainder)
add_two_numbers <- function(num1, num2){
num1 + num2
}
multiply_two_numbers <- function(num1, num2){
num1 * num2
}
some_function <- function(func){
func(2, 4)
}
evaluate <- function(func, dat){
func(dat)
}
submit()
evaluate(function(x){x[length(x)]},c(8, 4, 0))
paste()
?paste
paste("Programming", "is", "fun!")
paste("I'm", "a", "code", "monkey!")
submit()
paste("I'm", "a", "code", "monkey!")
SUBMIT()
submit()
ellipses_func(arg1, arg2 = TRUE, ...)
ellipses_func(arg1, arg2 = TRUE, ...)
paste (..., sep = " ", collapse = NULL)
simon_says <- function(...){
paste("Simon says:", ...)
}
telegram <- function(...){
paste("START", ..., "STOP", sep = " ")
}
submit()
telegram("I'm", "a", "code", "monkey")
add_alpha_and_beta <- function(...){
args <- list(...)
alpha <- args[["alpha"]]
beta  <- args[["beta"]]
alpha + beta
}
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs("Wylie", "hot", "moon")
"%mult_add_one%" <- function(left, right){ # Notice the quotation marks!
left * right + 1
}
"Good" %p% "job!"
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique.numeric_version)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sys.data()
bye()
swirl()
sapply(flags, unique)
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
TRUE == TRUE
install.packages(git)
Fired = c(34, 37, 37, 38, 41, 42, 43, 44, 44, 45, 45, 45, 46, 48, 49, 53, 53, 54, 54, 55, 56)
Not_fired = c(27, 33, 36, 37, 38, 38, 39, 42, 42, 43, 43, 44, 44, 44, 45, 45, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 51, 51, 52, 54)
t.test(x = Fired, y = Not_fired, conf.int = .95, var.equal = TRUE, alternative = "two.sided")
hist(Fired)
hist(Not_Fired)
hist(Not_fired)
plot(Fired)
plot(not_Fired)
plot(not_fired)
plot(Not_fired)
install.packages("fivethirtyeight")
install.packages("devtools")
devtools::install_github("rudeboybert/fivethirtyeight", build_vignettes = TRUE)
data(package = "fivethirtyeight")
data(18)
vignette("fivethirtyeight", package = "fivethirtyeight")
df <- data(college_recent_grads)
df <- data('college_recent_grads')
df <- data("fivethirtyeight", data="college_recent_grads")
library(fivethirtyeight)
df <- fivethirtyeight::college_recent_grads
names(df)
knitr::opts_chunk$set(echo = TRUE)
vignette("fivethirtyeight", package = "fivethirtyeight")
#http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/
url <- URL("http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
vignette("fivethirtyeight", package = "fivethirtyeight")
#http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/
url.show("http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
vignette("fivethirtyeight", package = "fivethirtyeight")
#http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/
url("http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
vignette("fivethirtyeight", package = "fivethirtyeight")
#http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/
url(open = "http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
vignette("fivethirtyeight", package = "fivethirtyeight")
#http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/
url("http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/", open = "http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
vignette("fivethirtyeight", package = "fivethirtyeight")
#http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/
url(description, open = "http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
dim(df)
names(df)
class(df)
df <- data.frame(fivethirtyeight::college_recent_grads)
names(df)
class(df)
vignette("fivethirtyeight", package = "fivethirtyeight")
#http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/
url(description, "http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
vignette("fivethirtyeight", package = "fivethirtyeight")
#http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/
url(description="Package", "http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
vignette("fivethirtyeight", package = "fivethirtyeight")
#http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/
url(description="Package", open.connection("http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/"))
vignette("fivethirtyeight", package = "fivethirtyeight")
#http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/
url(description="Package", open("http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/"))
vignette("fivethirtyeight", package = "fivethirtyeight")
#http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/
url(description="Package", open="http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
colnames(df)
count.fields(df)
URL <- "http://bit.ly/1jXJgDh"
temp <- tempfile()
download.file(URL,temp)
names(temp)
str(temp)
USData <- read.csv(gzfile(temp, "uds_summary.csv"))
temp
unlink(temp)
names(USData)
date(USData)
help(USData)
??USData
file.info(USData)
file.info(USData)
dim(USData)
names(USData)
class(USData)
str(USData)
file.mtime(USData)
help(USData)
USData?
)
install.packages("downloader")
library(downloader)
download("https://raw.githubusercontent.com/thoughtfulbloke/faoexample/master/stability.csv", destfile="stability.csv")
list.files
pwd
list.files()
ao <- read.csv("appleorange.csv")
download("https://raw.githubusercontent.com/thoughtfulbloke/faoexample/master/appleorange.csv", destfile="appleorange.csv")
ao <- read.csv("appleorange.csv")
str(ao)
ao <- read.csv("appleorange.csv", stringsAsFactors = False, header=FALSE)
ao <- read.csv("appleorange.csv", stringsAsFactors=False, header=FALSE)
aoraw <- read.csv("appleorange.csv",stringsAsFactors=False, header=FALSE)
aoraw <- read.csv("appleorange.csv",stringsAsFactors=FALSE, header=FALSE)
head(aoraw)
str(aoraw)
tail(aoraw)
aodata <- aoraw[3:700,]
names(aodata) <- c("Country", "Countrynumber", "Products", "Productnumber", "tonnes", "year")
str(aodata)
aodata$countrynumber <- as.integer(aodata$Countrynumber)
str(aodata)
fslimnes <- which(aodata$country == "Food supply quantity (tonnes) (tonnes)")
aodata <- aodata[(-1 * fslines),]
aodata <- aodata[(-1 * fslines),]
str(aodata)
library(plyr)
fslines <- which(aodata$country == "Food supply quantity (tonnes) (tonnes)")
aodata <- aodata[(-1 * fslines),]
str(aodata)
aodata$tonnes <- gsub("\xca", "", aodata$tonnes)
aodata$tonnes  <- as.numeric(aodata$tonnes)
str(aodata)
aodata$year <- 2009
library(reshape2)
setwd("C:\\Users\\carol\\git_repositories\\CaseStudy1")
